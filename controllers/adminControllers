


// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');
// const Admin = require('../models/admin'); // Mod√®le Admin avec Mongoose

// // üîß Fonction pour cr√©er un admin s'il n'existe pas
// exports.createAdminIfNotExist = async (req, res) => {
//   try {
//     let admin = await Admin.findOne({ email: 'admin@gmail.com' });

//     // S'il n'existe pas, on le cr√©e
//     if (!admin) {
//       const hashedPassword = await bcrypt.hash('admin', 10);
//       admin = await Admin.create({
//         nom: 'Admin',
//         email: 'admin@gmail.com',
//         password: hashedPassword,
//         role: 'admin'
//       });
//     }

//     // G√©n√©rer le token JWT
//     const token = jwt.sign(
//       { email: admin.email, role: admin.role },
//       'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb', // Cl√© secr√®te
//       { expiresIn: '1h' }
//     );

//     return res.status(200).json({
//       message: 'Admin existant ou cr√©√© avec succ√®s.',
//       token: token,
//       role: admin.role
//     });

//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ message: 'Erreur lors de la v√©rification de l\'admin.' });
//   }
// };

// // üîê Fonction de connexion (login)
// exports.login = async (req, res) => {
//   const { email, password } = req.body;

//   try {
//     const admin = await Admin.findOne({ email });

//     if (!admin) {
//       return res.status(400).json({ message: 'Admin non trouv√©' });
//     }

//     const isPasswordValid = await bcrypt.compare(password, admin.password);
//     if (!isPasswordValid) {
//       return res.status(400).json({ message: 'Mot de passe incorrect' });
//     }

//     const token = jwt.sign(
//       { email: admin.email, role: admin.role },
//       'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb',
//       { expiresIn: '1h' }
//     );

//     return res.status(200).json({
//       message: 'Connexion r√©ussie',
//       token: token,
//       role: admin.role,
//       userId: admin._id
//     });

//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ message: 'Erreur interne du serveur' });
//   }
// };

// // Fonction pour r√©cup√©rer les informations de l'admin connect√©
// exports.getAdmin = async (req, res) => {
//   // Le token est envoy√© dans l'en-t√™te Authorization
//   const token = req.headers.authorization?.split(' ')[1]; // "Bearer token"

//   if (!token) {
//     return res.status(401).json({ message: 'Authentification requise' });
//   }

//   try {
//     // V√©rification du token
//     const decoded = jwt.verify(token, 'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb'); // Cl√© secr√®te
//     const admin = await Admin.findById(decoded.userId); // Recherche de l'admin dans la base de donn√©es

//     if (!admin) {
//       return res.status(404).json({ message: 'Admin non trouv√©' });
//     }

//     // Retourner les informations de l'admin
//     return res.status(200).json({
//       message: 'Admin trouv√©',
//       admin: {
//         id: admin._id,
//         nom: admin.nom,
//         email: admin.email,
//         role: admin.role
//       }
//     });

//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration de l\'admin' });
//   }
// };


const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Admin = require('../models/admin'); // Mod√®le Admin avec Mongoose

// üîß Fonction pour cr√©er un admin s'il n'existe pas
exports.createAdminIfNotExist = async (req, res) => {
  try {
    // Recherche d'un admin avec l'email sp√©cifique
    let admin = await Admin.findOne({ email: 'admin@gmail.com' });

    // Si l'admin n'existe pas, on le cr√©e
    if (!admin) {
      // Hashage du mot de passe pour le s√©curiser
      const hashedPassword = await bcrypt.hash('admin', 10);

      // Cr√©ation de l'admin dans la base de donn√©es
      admin = await Admin.create({
        nom: 'Admin',
        email: 'admin@gmail.com',
        password: hashedPassword,
        role: 'admin'
      });
    }

    // G√©n√©rer le token JWT
    const token = jwt.sign(
      { userId: admin._id, email: admin.email, role: admin.role }, // Ajouter l'ID de l'admin ici
      'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb', // Cl√© secr√®te
      { expiresIn: '1h' }
    );

    // Retourner la r√©ponse avec le token et le r√¥le
    return res.status(200).json({
      message: 'Admin existant ou cr√©√© avec succ√®s.',
      token: token,
      role: admin.role
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Erreur lors de la v√©rification de l\'admin.' });
  }
};

// üîê Fonction de connexion (login)
exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Recherche de l'admin dans la base de donn√©es par email
    const admin = await Admin.findOne({ email });

    // Si l'admin n'existe pas
    if (!admin) {
      return res.status(400).json({ message: 'Admin non trouv√©' });
    }

    // V√©rification du mot de passe
    const isPasswordValid = await bcrypt.compare(password, admin.password);
    if (!isPasswordValid) {
      return res.status(400).json({ message: 'Mot de passe incorrect' });
    }

    // G√©n√©ration du token JWT avec l'ID de l'admin
    const token = jwt.sign(
      { userId: admin._id, email: admin.email, role: admin.role }, // Ajouter l'ID de l'admin ici
      'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb', // Cl√© secr√®te
      { expiresIn: '1h' }
    );

    // Retourner la r√©ponse avec le token, le r√¥le et l'ID de l'admin
    return res.status(200).json({
      message: 'Connexion r√©ussie',
      token: token,
      role: admin.role,
      userId: admin._id
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Erreur interne du serveur' });
  }
};

// Fonction pour r√©cup√©rer les informations de l'admin connect√©
exports.getAdmin = async (req, res) => {
  // Le token est envoy√© dans l'en-t√™te Authorization sous la forme "Bearer <token>"
  const token = req.headers.authorization?.split(' ')[1]; // "Bearer token"

  // Si aucun token n'est fourni
  if (!token) {
    return res.status(401).json({ message: 'Authentification requise' });
  }

  try {
    // V√©rification du token
    const decoded = jwt.verify(token, 'Zk7#3hdU8v2wrD!9mMZp1Qm0!Yb'); // Cl√© secr√®te

    // Recherche de l'admin √† partir de l'ID extrait du token
    const admin = await Admin.findById(decoded.userId);

    // Si l'admin n'est pas trouv√©
    if (!admin) {
      return res.status(404).json({ message: 'Admin non trouv√©' });
    }

    // Retourner les informations de l'admin
    return res.status(200).json({
      message: 'Admin trouv√©',
      admin: {
        id: admin._id,
        nom: admin.nom,
        email: admin.email,
        role: admin.role
      }
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration de l\'admin' });
  }
};
